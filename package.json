{
  "name": "neotalent-calorie-tracker",
  "version": "1.0.0",
  "description": "AI-powered calorie estimation web application",
  "main": "backend/dist/server.js",
  "scripts": {
    "start": "docker-compose up -d",
    "stop": "docker-compose down",
    "dev": "echo '‚ùå Use Docker only! Run: npm start (for production) or use docker-compose directly for development' && exit 1",
    "dev:docker": "docker-compose -f docker-compose.dev.yml up -d",
    "dev:stop": "docker-compose -f docker-compose.dev.yml down",
    "build": "docker-compose build",
    "rebuild": "docker-compose build --no-cache",
    "logs": "docker-compose logs -f",
    "logs:backend": "docker-compose logs -f backend",
    "logs:frontend": "docker-compose logs -f frontend",
    "logs:mongodb": "docker-compose logs -f mongodb",
    "shell:backend": "docker-compose exec backend sh",
    "shell:mongodb": "docker-compose exec mongodb bash",
    "test": "docker-compose exec backend npm test",
    "test:watch": "docker-compose exec backend npm run test:watch",
    "install:all": "npm install && cd backend && npm install && cd ../frontend && npm install",
    "docker:start": "./start-docker.sh",
    "docker:clean": "docker system prune -f && docker volume prune -f",
    "docker:reset": "docker-compose down --volumes --remove-orphans && docker system prune -a -f",
    "help": "echo 'üê≥ Docker Commands Only! Available commands:\n  npm start - Start production containers\n  npm run dev:docker - Start development containers\n  npm run logs - View all logs\n  npm run stop - Stop containers\n  npm run shell:backend - Access backend shell\n  npm run test - Run tests in container'"
  },
  "keywords": [
    "ai",
    "calorie",
    "nutrition",
    "health"
  ],
  "author": "NeoTalent",
  "license": "MIT",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "express-session": "^1.18.2",
    "helmet": "^7.1.0",
    "joi": "^17.11.0",
    "openai": "^4.20.1"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "nodemon": "^3.0.2",
    "supertest": "^6.3.3"
  },
  "jest": {
    "testEnvironment": "node",
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ]
  }
}
